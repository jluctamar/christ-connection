@use '@angular/material' as mat;
@import '@angular/material/theming';
@include mat.core();

$app-primary: mat.define-palette(mat.$cyan-palette);
$app-accent:  mat.define-palette(mat.$amber-palette);
$app-warn:    mat.define-palette(mat.$orange-palette);

$app-theme: mat.define-light-theme($app-primary, $app-accent, $app-warn);

@include mat.all-component-themes($app-theme);

/* Application Color Pallete */
$appBronze: rgba(172, 122, 71, 1);
$appBlue: rgba(81, 169, 188, 1);
$appBlack: rgba(22, 23, 30, 1);
$appCrimson: rgba(93, 22, 26, 1);
$appBeige: rgba(254, 230, 206, 1);


/*Mixins*/
@mixin set-text-shadow($color) {
    text-shadow: $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px,
    $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px,
    $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px,
    $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px;;
}
@mixin set-text-shadow-with-glow($color) {
    text-shadow: $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px,
    $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px,
    $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px,
    $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 1px, $color 0px 0px 30px;;
}




/*CSS Animations*/

@keyframes btn-pulse {
    0% {
      transform: scale(1); /* Start at Initial Size */
    }
    25% {
      transform: scale(1.1); /* increasing the size */
    }
    50% {
      transform: scale(1.2); /* increasing the size */
    }
    75% {
      transform: scale(1.1); /* deacreasing the size */
    }
    100% {
      transform: scale(1); /* seeting back to initial size */
    }
  }

@keyframes bounce {
    0% {
      height: 450px ; 
      width: 450px;
    }
    25% {
      height: 450px; 
      width: 400px;
    }
    50% {
      height: 375px; 
      width: 460px;
      transform:translateY(-15px)
    }
    75% {
      height: 400px; 
      width: 450px;
    }
    100% {

      transform:translateY(0px)
    }
  }
// @keyframes bounce-shadow {
//     0% {
//       transform: scale(1); __<<ngThemingMigrationEscapedComment8>>__
//     }
//     25% {
//       transform: scale(1.1); __<<ngThemingMigrationEscapedComment9>>__
//     }
//     50% {
//       transform: scale(1.2); __<<ngThemingMigrationEscapedComment10>>__
//     }
//     75% {
//       transform: scale(1.1); __<<ngThemingMigrationEscapedComment11>>__
//     }
//     100% {
//       transform: scale(1); __<<ngThemingMigrationEscapedComment12>>__
//     }
//   }